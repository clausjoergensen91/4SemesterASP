//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MainWebApplication.webhostProxy {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MainWebApplication.webhostProxy.Player))]
    public partial class User : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AdminPrivilegeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirstNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AdminPrivilege {
            get {
                return this.AdminPrivilegeField;
            }
            set {
                if ((this.AdminPrivilegeField.Equals(value) != true)) {
                    this.AdminPrivilegeField = value;
                    this.RaisePropertyChanged("AdminPrivilege");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirstName {
            get {
                return this.FirstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstNameField, value) != true)) {
                    this.FirstNameField = value;
                    this.RaisePropertyChanged("FirstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastName {
            get {
                return this.LastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastNameField, value) != true)) {
                    this.LastNameField = value;
                    this.RaisePropertyChanged("LastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.TypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeField, value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Player", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    [System.SerializableAttribute()]
    public partial class Player : MainWebApplication.webhostProxy.User {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int GamesPlayedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int GoalsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PenaltiesField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int GamesPlayed {
            get {
                return this.GamesPlayedField;
            }
            set {
                if ((this.GamesPlayedField.Equals(value) != true)) {
                    this.GamesPlayedField = value;
                    this.RaisePropertyChanged("GamesPlayed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Goals {
            get {
                return this.GoalsField;
            }
            set {
                if ((this.GoalsField.Equals(value) != true)) {
                    this.GoalsField = value;
                    this.RaisePropertyChanged("Goals");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Number {
            get {
                return this.NumberField;
            }
            set {
                if ((this.NumberField.Equals(value) != true)) {
                    this.NumberField = value;
                    this.RaisePropertyChanged("Number");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Penalties {
            get {
                return this.PenaltiesField;
            }
            set {
                if ((this.PenaltiesField.Equals(value) != true)) {
                    this.PenaltiesField = value;
                    this.RaisePropertyChanged("Penalties");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Team", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    [System.SerializableAttribute()]
    public partial class Team : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MainWebApplication.webhostProxy.Player[] PlayersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MainWebApplication.webhostProxy.Player[] Players {
            get {
                return this.PlayersField;
            }
            set {
                if ((object.ReferenceEquals(this.PlayersField, value) != true)) {
                    this.PlayersField = value;
                    this.RaisePropertyChanged("Players");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.TypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeField, value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Match", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    [System.SerializableAttribute()]
    public partial class Match : MainWebApplication.webhostProxy.Events {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AwayGoalField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int HomeGoalField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OpponentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MainWebApplication.webhostProxy.Team TeamField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AwayGoal {
            get {
                return this.AwayGoalField;
            }
            set {
                if ((this.AwayGoalField.Equals(value) != true)) {
                    this.AwayGoalField = value;
                    this.RaisePropertyChanged("AwayGoal");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int HomeGoal {
            get {
                return this.HomeGoalField;
            }
            set {
                if ((this.HomeGoalField.Equals(value) != true)) {
                    this.HomeGoalField = value;
                    this.RaisePropertyChanged("HomeGoal");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Opponent {
            get {
                return this.OpponentField;
            }
            set {
                if ((object.ReferenceEquals(this.OpponentField, value) != true)) {
                    this.OpponentField = value;
                    this.RaisePropertyChanged("Opponent");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MainWebApplication.webhostProxy.Team Team {
            get {
                return this.TeamField;
            }
            set {
                if ((object.ReferenceEquals(this.TeamField, value) != true)) {
                    this.TeamField = value;
                    this.RaisePropertyChanged("Team");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ContentInfo", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MainWebApplication.webhostProxy.News))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MainWebApplication.webhostProxy.Events))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MainWebApplication.webhostProxy.TrainingSession))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MainWebApplication.webhostProxy.Match))]
    public partial class ContentInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MainWebApplication.webhostProxy.User AuthorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ContentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ContentTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsPublicField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TitleField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MainWebApplication.webhostProxy.User Author {
            get {
                return this.AuthorField;
            }
            set {
                if ((object.ReferenceEquals(this.AuthorField, value) != true)) {
                    this.AuthorField = value;
                    this.RaisePropertyChanged("Author");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Content {
            get {
                return this.ContentField;
            }
            set {
                if ((object.ReferenceEquals(this.ContentField, value) != true)) {
                    this.ContentField = value;
                    this.RaisePropertyChanged("Content");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ContentType {
            get {
                return this.ContentTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.ContentTypeField, value) != true)) {
                    this.ContentTypeField = value;
                    this.RaisePropertyChanged("ContentType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date {
            get {
                return this.DateField;
            }
            set {
                if ((this.DateField.Equals(value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsPublic {
            get {
                return this.IsPublicField;
            }
            set {
                if ((this.IsPublicField.Equals(value) != true)) {
                    this.IsPublicField = value;
                    this.RaisePropertyChanged("IsPublic");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="News", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    [System.SerializableAttribute()]
    public partial class News : MainWebApplication.webhostProxy.ContentInfo {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PictureField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Picture {
            get {
                return this.PictureField;
            }
            set {
                if ((object.ReferenceEquals(this.PictureField, value) != true)) {
                    this.PictureField = value;
                    this.RaisePropertyChanged("Picture");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Events", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MainWebApplication.webhostProxy.TrainingSession))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MainWebApplication.webhostProxy.Match))]
    public partial class Events : MainWebApplication.webhostProxy.ContentInfo {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime EndTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EventTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime StartTimeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime EndTime {
            get {
                return this.EndTimeField;
            }
            set {
                if ((this.EndTimeField.Equals(value) != true)) {
                    this.EndTimeField = value;
                    this.RaisePropertyChanged("EndTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EventType {
            get {
                return this.EventTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.EventTypeField, value) != true)) {
                    this.EventTypeField = value;
                    this.RaisePropertyChanged("EventType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime StartTime {
            get {
                return this.StartTimeField;
            }
            set {
                if ((this.StartTimeField.Equals(value) != true)) {
                    this.StartTimeField = value;
                    this.RaisePropertyChanged("StartTime");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TrainingSession", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    [System.SerializableAttribute()]
    public partial class TrainingSession : MainWebApplication.webhostProxy.Events {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TrainerField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Trainer {
            get {
                return this.TrainerField;
            }
            set {
                if ((object.ReferenceEquals(this.TrainerField, value) != true)) {
                    this.TrainerField = value;
                    this.RaisePropertyChanged("Trainer");
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="webhostProxy.IBSIService")]
    public interface IBSIService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBSIService/GetRolesForUser", ReplyAction="http://tempuri.org/IBSIService/GetRolesForUserResponse")]
        int GetRolesForUser(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBSIService/GetRolesForUser", ReplyAction="http://tempuri.org/IBSIService/GetRolesForUserResponse")]
        System.Threading.Tasks.Task<int> GetRolesForUserAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBSIService/ValidateUser", ReplyAction="http://tempuri.org/IBSIService/ValidateUserResponse")]
        bool ValidateUser(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBSIService/ValidateUser", ReplyAction="http://tempuri.org/IBSIService/ValidateUserResponse")]
        System.Threading.Tasks.Task<bool> ValidateUserAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBSIService/FindPlayer", ReplyAction="http://tempuri.org/IBSIService/FindPlayerResponse")]
        MainWebApplication.webhostProxy.Player FindPlayer(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBSIService/FindPlayer", ReplyAction="http://tempuri.org/IBSIService/FindPlayerResponse")]
        System.Threading.Tasks.Task<MainWebApplication.webhostProxy.Player> FindPlayerAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBSIService/DeletePlayer", ReplyAction="http://tempuri.org/IBSIService/DeletePlayerResponse")]
        bool DeletePlayer(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBSIService/DeletePlayer", ReplyAction="http://tempuri.org/IBSIService/DeletePlayerResponse")]
        System.Threading.Tasks.Task<bool> DeletePlayerAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBSIService/CreatePlayer", ReplyAction="http://tempuri.org/IBSIService/CreatePlayerResponse")]
        bool CreatePlayer(string username, string password, string firstname, string lastname, string email, int admPri, string type, int number, int gamesplayed, int goals, int penalties);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBSIService/CreatePlayer", ReplyAction="http://tempuri.org/IBSIService/CreatePlayerResponse")]
        System.Threading.Tasks.Task<bool> CreatePlayerAsync(string username, string password, string firstname, string lastname, string email, int admPri, string type, int number, int gamesplayed, int goals, int penalties);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBSIService/CreateUser", ReplyAction="http://tempuri.org/IBSIService/CreateUserResponse")]
        bool CreateUser(string username, string password, string firstname, string lastname, string email, int admPri, string type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBSIService/CreateUser", ReplyAction="http://tempuri.org/IBSIService/CreateUserResponse")]
        System.Threading.Tasks.Task<bool> CreateUserAsync(string username, string password, string firstname, string lastname, string email, int admPri, string type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBSIService/CreateNews", ReplyAction="http://tempuri.org/IBSIService/CreateNewsResponse")]
        bool CreateNews(string title, MainWebApplication.webhostProxy.User author, System.DateTime date, string content, bool isPublic, string contentType, string picture);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBSIService/CreateNews", ReplyAction="http://tempuri.org/IBSIService/CreateNewsResponse")]
        System.Threading.Tasks.Task<bool> CreateNewsAsync(string title, MainWebApplication.webhostProxy.User author, System.DateTime date, string content, bool isPublic, string contentType, string picture);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBSIService/CreateMatch", ReplyAction="http://tempuri.org/IBSIService/CreateMatchResponse")]
        bool CreateMatch(string title, MainWebApplication.webhostProxy.User author, System.DateTime date, string content, bool isPublic, string contentType, System.DateTime startTime, System.DateTime endTime, string eventType, string opponent, int homegoals, int awaygoals, MainWebApplication.webhostProxy.Team team);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBSIService/CreateMatch", ReplyAction="http://tempuri.org/IBSIService/CreateMatchResponse")]
        System.Threading.Tasks.Task<bool> CreateMatchAsync(string title, MainWebApplication.webhostProxy.User author, System.DateTime date, string content, bool isPublic, string contentType, System.DateTime startTime, System.DateTime endTime, string eventType, string opponent, int homegoals, int awaygoals, MainWebApplication.webhostProxy.Team team);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBSIService/DeleteUser", ReplyAction="http://tempuri.org/IBSIService/DeleteUserResponse")]
        bool DeleteUser(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBSIService/DeleteUser", ReplyAction="http://tempuri.org/IBSIService/DeleteUserResponse")]
        System.Threading.Tasks.Task<bool> DeleteUserAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBSIService/FindUser", ReplyAction="http://tempuri.org/IBSIService/FindUserResponse")]
        MainWebApplication.webhostProxy.User FindUser(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBSIService/FindUser", ReplyAction="http://tempuri.org/IBSIService/FindUserResponse")]
        System.Threading.Tasks.Task<MainWebApplication.webhostProxy.User> FindUserAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBSIService/FindMatches", ReplyAction="http://tempuri.org/IBSIService/FindMatchesResponse")]
        MainWebApplication.webhostProxy.Match[] FindMatches(System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBSIService/FindMatches", ReplyAction="http://tempuri.org/IBSIService/FindMatchesResponse")]
        System.Threading.Tasks.Task<MainWebApplication.webhostProxy.Match[]> FindMatchesAsync(System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBSIService/FindTrainingSessions", ReplyAction="http://tempuri.org/IBSIService/FindTrainingSessionsResponse")]
        MainWebApplication.webhostProxy.TrainingSession[] FindTrainingSessions(System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBSIService/FindTrainingSessions", ReplyAction="http://tempuri.org/IBSIService/FindTrainingSessionsResponse")]
        System.Threading.Tasks.Task<MainWebApplication.webhostProxy.TrainingSession[]> FindTrainingSessionsAsync(System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBSIService/FindNews", ReplyAction="http://tempuri.org/IBSIService/FindNewsResponse")]
        MainWebApplication.webhostProxy.News[] FindNews(System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBSIService/FindNews", ReplyAction="http://tempuri.org/IBSIService/FindNewsResponse")]
        System.Threading.Tasks.Task<MainWebApplication.webhostProxy.News[]> FindNewsAsync(System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBSIService/UpdateUser", ReplyAction="http://tempuri.org/IBSIService/UpdateUserResponse")]
        bool UpdateUser(string oldFn, string oldLn, string username, string password, string firstname, string lastname, string email, int admPri, string type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBSIService/UpdateUser", ReplyAction="http://tempuri.org/IBSIService/UpdateUserResponse")]
        System.Threading.Tasks.Task<bool> UpdateUserAsync(string oldFn, string oldLn, string username, string password, string firstname, string lastname, string email, int admPri, string type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBSIService/FindTeamWithId", ReplyAction="http://tempuri.org/IBSIService/FindTeamWithIdResponse")]
        MainWebApplication.webhostProxy.Team FindTeamWithId(int id, bool retrieveAssoc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBSIService/FindTeamWithId", ReplyAction="http://tempuri.org/IBSIService/FindTeamWithIdResponse")]
        System.Threading.Tasks.Task<MainWebApplication.webhostProxy.Team> FindTeamWithIdAsync(int id, bool retrieveAssoc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBSIService/FindTeam", ReplyAction="http://tempuri.org/IBSIService/FindTeamResponse")]
        MainWebApplication.webhostProxy.Team FindTeam(string name, bool retrieveAssoc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBSIService/FindTeam", ReplyAction="http://tempuri.org/IBSIService/FindTeamResponse")]
        System.Threading.Tasks.Task<MainWebApplication.webhostProxy.Team> FindTeamAsync(string name, bool retrieveAssoc);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IBSIServiceChannel : MainWebApplication.webhostProxy.IBSIService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BSIServiceClient : System.ServiceModel.ClientBase<MainWebApplication.webhostProxy.IBSIService>, MainWebApplication.webhostProxy.IBSIService {
        
        public BSIServiceClient() {
        }
        
        public BSIServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public BSIServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BSIServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BSIServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int GetRolesForUser(string username) {
            return base.Channel.GetRolesForUser(username);
        }
        
        public System.Threading.Tasks.Task<int> GetRolesForUserAsync(string username) {
            return base.Channel.GetRolesForUserAsync(username);
        }
        
        public bool ValidateUser(string username, string password) {
            return base.Channel.ValidateUser(username, password);
        }
        
        public System.Threading.Tasks.Task<bool> ValidateUserAsync(string username, string password) {
            return base.Channel.ValidateUserAsync(username, password);
        }
        
        public MainWebApplication.webhostProxy.Player FindPlayer(string email) {
            return base.Channel.FindPlayer(email);
        }
        
        public System.Threading.Tasks.Task<MainWebApplication.webhostProxy.Player> FindPlayerAsync(string email) {
            return base.Channel.FindPlayerAsync(email);
        }
        
        public bool DeletePlayer(string email) {
            return base.Channel.DeletePlayer(email);
        }
        
        public System.Threading.Tasks.Task<bool> DeletePlayerAsync(string email) {
            return base.Channel.DeletePlayerAsync(email);
        }
        
        public bool CreatePlayer(string username, string password, string firstname, string lastname, string email, int admPri, string type, int number, int gamesplayed, int goals, int penalties) {
            return base.Channel.CreatePlayer(username, password, firstname, lastname, email, admPri, type, number, gamesplayed, goals, penalties);
        }
        
        public System.Threading.Tasks.Task<bool> CreatePlayerAsync(string username, string password, string firstname, string lastname, string email, int admPri, string type, int number, int gamesplayed, int goals, int penalties) {
            return base.Channel.CreatePlayerAsync(username, password, firstname, lastname, email, admPri, type, number, gamesplayed, goals, penalties);
        }
        
        public bool CreateUser(string username, string password, string firstname, string lastname, string email, int admPri, string type) {
            return base.Channel.CreateUser(username, password, firstname, lastname, email, admPri, type);
        }
        
        public System.Threading.Tasks.Task<bool> CreateUserAsync(string username, string password, string firstname, string lastname, string email, int admPri, string type) {
            return base.Channel.CreateUserAsync(username, password, firstname, lastname, email, admPri, type);
        }
        
        public bool CreateNews(string title, MainWebApplication.webhostProxy.User author, System.DateTime date, string content, bool isPublic, string contentType, string picture) {
            return base.Channel.CreateNews(title, author, date, content, isPublic, contentType, picture);
        }
        
        public System.Threading.Tasks.Task<bool> CreateNewsAsync(string title, MainWebApplication.webhostProxy.User author, System.DateTime date, string content, bool isPublic, string contentType, string picture) {
            return base.Channel.CreateNewsAsync(title, author, date, content, isPublic, contentType, picture);
        }
        
        public bool CreateMatch(string title, MainWebApplication.webhostProxy.User author, System.DateTime date, string content, bool isPublic, string contentType, System.DateTime startTime, System.DateTime endTime, string eventType, string opponent, int homegoals, int awaygoals, MainWebApplication.webhostProxy.Team team) {
            return base.Channel.CreateMatch(title, author, date, content, isPublic, contentType, startTime, endTime, eventType, opponent, homegoals, awaygoals, team);
        }
        
        public System.Threading.Tasks.Task<bool> CreateMatchAsync(string title, MainWebApplication.webhostProxy.User author, System.DateTime date, string content, bool isPublic, string contentType, System.DateTime startTime, System.DateTime endTime, string eventType, string opponent, int homegoals, int awaygoals, MainWebApplication.webhostProxy.Team team) {
            return base.Channel.CreateMatchAsync(title, author, date, content, isPublic, contentType, startTime, endTime, eventType, opponent, homegoals, awaygoals, team);
        }
        
        public bool DeleteUser(string email) {
            return base.Channel.DeleteUser(email);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteUserAsync(string email) {
            return base.Channel.DeleteUserAsync(email);
        }
        
        public MainWebApplication.webhostProxy.User FindUser(string email) {
            return base.Channel.FindUser(email);
        }
        
        public System.Threading.Tasks.Task<MainWebApplication.webhostProxy.User> FindUserAsync(string email) {
            return base.Channel.FindUserAsync(email);
        }
        
        public MainWebApplication.webhostProxy.Match[] FindMatches(System.DateTime date) {
            return base.Channel.FindMatches(date);
        }
        
        public System.Threading.Tasks.Task<MainWebApplication.webhostProxy.Match[]> FindMatchesAsync(System.DateTime date) {
            return base.Channel.FindMatchesAsync(date);
        }
        
        public MainWebApplication.webhostProxy.TrainingSession[] FindTrainingSessions(System.DateTime date) {
            return base.Channel.FindTrainingSessions(date);
        }
        
        public System.Threading.Tasks.Task<MainWebApplication.webhostProxy.TrainingSession[]> FindTrainingSessionsAsync(System.DateTime date) {
            return base.Channel.FindTrainingSessionsAsync(date);
        }
        
        public MainWebApplication.webhostProxy.News[] FindNews(System.DateTime date) {
            return base.Channel.FindNews(date);
        }
        
        public System.Threading.Tasks.Task<MainWebApplication.webhostProxy.News[]> FindNewsAsync(System.DateTime date) {
            return base.Channel.FindNewsAsync(date);
        }
        
        public bool UpdateUser(string oldFn, string oldLn, string username, string password, string firstname, string lastname, string email, int admPri, string type) {
            return base.Channel.UpdateUser(oldFn, oldLn, username, password, firstname, lastname, email, admPri, type);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateUserAsync(string oldFn, string oldLn, string username, string password, string firstname, string lastname, string email, int admPri, string type) {
            return base.Channel.UpdateUserAsync(oldFn, oldLn, username, password, firstname, lastname, email, admPri, type);
        }
        
        public MainWebApplication.webhostProxy.Team FindTeamWithId(int id, bool retrieveAssoc) {
            return base.Channel.FindTeamWithId(id, retrieveAssoc);
        }
        
        public System.Threading.Tasks.Task<MainWebApplication.webhostProxy.Team> FindTeamWithIdAsync(int id, bool retrieveAssoc) {
            return base.Channel.FindTeamWithIdAsync(id, retrieveAssoc);
        }
        
        public MainWebApplication.webhostProxy.Team FindTeam(string name, bool retrieveAssoc) {
            return base.Channel.FindTeam(name, retrieveAssoc);
        }
        
        public System.Threading.Tasks.Task<MainWebApplication.webhostProxy.Team> FindTeamAsync(string name, bool retrieveAssoc) {
            return base.Channel.FindTeamAsync(name, retrieveAssoc);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="webhostProxy.ISecureBSIService")]
    public interface ISecureBSIService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISecureBSIService/GetRolesForUserSecure", ReplyAction="http://tempuri.org/ISecureBSIService/GetRolesForUserSecureResponse")]
        int GetRolesForUserSecure(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISecureBSIService/GetRolesForUserSecure", ReplyAction="http://tempuri.org/ISecureBSIService/GetRolesForUserSecureResponse")]
        System.Threading.Tasks.Task<int> GetRolesForUserSecureAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISecureBSIService/ValidateUserSecure", ReplyAction="http://tempuri.org/ISecureBSIService/ValidateUserSecureResponse")]
        bool ValidateUserSecure(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISecureBSIService/ValidateUserSecure", ReplyAction="http://tempuri.org/ISecureBSIService/ValidateUserSecureResponse")]
        System.Threading.Tasks.Task<bool> ValidateUserSecureAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISecureBSIService/FindPlayerSecure", ReplyAction="http://tempuri.org/ISecureBSIService/FindPlayerSecureResponse")]
        MainWebApplication.webhostProxy.Player FindPlayerSecure(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISecureBSIService/FindPlayerSecure", ReplyAction="http://tempuri.org/ISecureBSIService/FindPlayerSecureResponse")]
        System.Threading.Tasks.Task<MainWebApplication.webhostProxy.Player> FindPlayerSecureAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISecureBSIService/DeletePlayerSecure", ReplyAction="http://tempuri.org/ISecureBSIService/DeletePlayerSecureResponse")]
        bool DeletePlayerSecure(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISecureBSIService/DeletePlayerSecure", ReplyAction="http://tempuri.org/ISecureBSIService/DeletePlayerSecureResponse")]
        System.Threading.Tasks.Task<bool> DeletePlayerSecureAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISecureBSIService/CreatePlayerSecure", ReplyAction="http://tempuri.org/ISecureBSIService/CreatePlayerSecureResponse")]
        bool CreatePlayerSecure(string username, string password, string firstname, string lastname, string email, int admPri, string type, int number, int gamesplayed, int goals, int penalties);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISecureBSIService/CreatePlayerSecure", ReplyAction="http://tempuri.org/ISecureBSIService/CreatePlayerSecureResponse")]
        System.Threading.Tasks.Task<bool> CreatePlayerSecureAsync(string username, string password, string firstname, string lastname, string email, int admPri, string type, int number, int gamesplayed, int goals, int penalties);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISecureBSIService/CreateUserSecure", ReplyAction="http://tempuri.org/ISecureBSIService/CreateUserSecureResponse")]
        bool CreateUserSecure(string username, string password, string firstname, string lastname, string email, int admPri, string type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISecureBSIService/CreateUserSecure", ReplyAction="http://tempuri.org/ISecureBSIService/CreateUserSecureResponse")]
        System.Threading.Tasks.Task<bool> CreateUserSecureAsync(string username, string password, string firstname, string lastname, string email, int admPri, string type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISecureBSIService/CreateNewsSecure", ReplyAction="http://tempuri.org/ISecureBSIService/CreateNewsSecureResponse")]
        bool CreateNewsSecure(string title, MainWebApplication.webhostProxy.User author, System.DateTime date, string content, bool isPublic, string contentType, string picture);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISecureBSIService/CreateNewsSecure", ReplyAction="http://tempuri.org/ISecureBSIService/CreateNewsSecureResponse")]
        System.Threading.Tasks.Task<bool> CreateNewsSecureAsync(string title, MainWebApplication.webhostProxy.User author, System.DateTime date, string content, bool isPublic, string contentType, string picture);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISecureBSIService/CreateMatchSecure", ReplyAction="http://tempuri.org/ISecureBSIService/CreateMatchSecureResponse")]
        bool CreateMatchSecure(string title, MainWebApplication.webhostProxy.User author, System.DateTime date, string content, bool isPublic, string contentType, System.DateTime startTime, System.DateTime endTime, string eventType, string opponent, int homegoals, int awaygoals, MainWebApplication.webhostProxy.Team team);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISecureBSIService/CreateMatchSecure", ReplyAction="http://tempuri.org/ISecureBSIService/CreateMatchSecureResponse")]
        System.Threading.Tasks.Task<bool> CreateMatchSecureAsync(string title, MainWebApplication.webhostProxy.User author, System.DateTime date, string content, bool isPublic, string contentType, System.DateTime startTime, System.DateTime endTime, string eventType, string opponent, int homegoals, int awaygoals, MainWebApplication.webhostProxy.Team team);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISecureBSIService/DeleteUserSecure", ReplyAction="http://tempuri.org/ISecureBSIService/DeleteUserSecureResponse")]
        bool DeleteUserSecure(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISecureBSIService/DeleteUserSecure", ReplyAction="http://tempuri.org/ISecureBSIService/DeleteUserSecureResponse")]
        System.Threading.Tasks.Task<bool> DeleteUserSecureAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISecureBSIService/FindUserSecure", ReplyAction="http://tempuri.org/ISecureBSIService/FindUserSecureResponse")]
        MainWebApplication.webhostProxy.User FindUserSecure(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISecureBSIService/FindUserSecure", ReplyAction="http://tempuri.org/ISecureBSIService/FindUserSecureResponse")]
        System.Threading.Tasks.Task<MainWebApplication.webhostProxy.User> FindUserSecureAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISecureBSIService/FindMatchesSecure", ReplyAction="http://tempuri.org/ISecureBSIService/FindMatchesSecureResponse")]
        MainWebApplication.webhostProxy.Match[] FindMatchesSecure(System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISecureBSIService/FindMatchesSecure", ReplyAction="http://tempuri.org/ISecureBSIService/FindMatchesSecureResponse")]
        System.Threading.Tasks.Task<MainWebApplication.webhostProxy.Match[]> FindMatchesSecureAsync(System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISecureBSIService/FindTrainingSessionsSecure", ReplyAction="http://tempuri.org/ISecureBSIService/FindTrainingSessionsSecureResponse")]
        MainWebApplication.webhostProxy.TrainingSession[] FindTrainingSessionsSecure(System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISecureBSIService/FindTrainingSessionsSecure", ReplyAction="http://tempuri.org/ISecureBSIService/FindTrainingSessionsSecureResponse")]
        System.Threading.Tasks.Task<MainWebApplication.webhostProxy.TrainingSession[]> FindTrainingSessionsSecureAsync(System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISecureBSIService/FindNewsSecure", ReplyAction="http://tempuri.org/ISecureBSIService/FindNewsSecureResponse")]
        MainWebApplication.webhostProxy.News[] FindNewsSecure(System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISecureBSIService/FindNewsSecure", ReplyAction="http://tempuri.org/ISecureBSIService/FindNewsSecureResponse")]
        System.Threading.Tasks.Task<MainWebApplication.webhostProxy.News[]> FindNewsSecureAsync(System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISecureBSIService/UpdateUserSecure", ReplyAction="http://tempuri.org/ISecureBSIService/UpdateUserSecureResponse")]
        bool UpdateUserSecure(string oldFn, string oldLn, string username, string password, string firstname, string lastname, string email, int admPri, string type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISecureBSIService/UpdateUserSecure", ReplyAction="http://tempuri.org/ISecureBSIService/UpdateUserSecureResponse")]
        System.Threading.Tasks.Task<bool> UpdateUserSecureAsync(string oldFn, string oldLn, string username, string password, string firstname, string lastname, string email, int admPri, string type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISecureBSIService/FindTeamWithIdSecure", ReplyAction="http://tempuri.org/ISecureBSIService/FindTeamWithIdSecureResponse")]
        MainWebApplication.webhostProxy.Team FindTeamWithIdSecure(int id, bool retrieveAssoc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISecureBSIService/FindTeamWithIdSecure", ReplyAction="http://tempuri.org/ISecureBSIService/FindTeamWithIdSecureResponse")]
        System.Threading.Tasks.Task<MainWebApplication.webhostProxy.Team> FindTeamWithIdSecureAsync(int id, bool retrieveAssoc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISecureBSIService/FindTeamSecure", ReplyAction="http://tempuri.org/ISecureBSIService/FindTeamSecureResponse")]
        MainWebApplication.webhostProxy.Team FindTeamSecure(string name, bool retrieveAssoc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISecureBSIService/FindTeamSecure", ReplyAction="http://tempuri.org/ISecureBSIService/FindTeamSecureResponse")]
        System.Threading.Tasks.Task<MainWebApplication.webhostProxy.Team> FindTeamSecureAsync(string name, bool retrieveAssoc);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISecureBSIServiceChannel : MainWebApplication.webhostProxy.ISecureBSIService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SecureBSIServiceClient : System.ServiceModel.ClientBase<MainWebApplication.webhostProxy.ISecureBSIService>, MainWebApplication.webhostProxy.ISecureBSIService {
        
        public SecureBSIServiceClient() {
        }
        
        public SecureBSIServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SecureBSIServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SecureBSIServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SecureBSIServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int GetRolesForUserSecure(string username) {
            return base.Channel.GetRolesForUserSecure(username);
        }
        
        public System.Threading.Tasks.Task<int> GetRolesForUserSecureAsync(string username) {
            return base.Channel.GetRolesForUserSecureAsync(username);
        }
        
        public bool ValidateUserSecure(string username, string password) {
            return base.Channel.ValidateUserSecure(username, password);
        }
        
        public System.Threading.Tasks.Task<bool> ValidateUserSecureAsync(string username, string password) {
            return base.Channel.ValidateUserSecureAsync(username, password);
        }
        
        public MainWebApplication.webhostProxy.Player FindPlayerSecure(string email) {
            return base.Channel.FindPlayerSecure(email);
        }
        
        public System.Threading.Tasks.Task<MainWebApplication.webhostProxy.Player> FindPlayerSecureAsync(string email) {
            return base.Channel.FindPlayerSecureAsync(email);
        }
        
        public bool DeletePlayerSecure(string email) {
            return base.Channel.DeletePlayerSecure(email);
        }
        
        public System.Threading.Tasks.Task<bool> DeletePlayerSecureAsync(string email) {
            return base.Channel.DeletePlayerSecureAsync(email);
        }
        
        public bool CreatePlayerSecure(string username, string password, string firstname, string lastname, string email, int admPri, string type, int number, int gamesplayed, int goals, int penalties) {
            return base.Channel.CreatePlayerSecure(username, password, firstname, lastname, email, admPri, type, number, gamesplayed, goals, penalties);
        }
        
        public System.Threading.Tasks.Task<bool> CreatePlayerSecureAsync(string username, string password, string firstname, string lastname, string email, int admPri, string type, int number, int gamesplayed, int goals, int penalties) {
            return base.Channel.CreatePlayerSecureAsync(username, password, firstname, lastname, email, admPri, type, number, gamesplayed, goals, penalties);
        }
        
        public bool CreateUserSecure(string username, string password, string firstname, string lastname, string email, int admPri, string type) {
            return base.Channel.CreateUserSecure(username, password, firstname, lastname, email, admPri, type);
        }
        
        public System.Threading.Tasks.Task<bool> CreateUserSecureAsync(string username, string password, string firstname, string lastname, string email, int admPri, string type) {
            return base.Channel.CreateUserSecureAsync(username, password, firstname, lastname, email, admPri, type);
        }
        
        public bool CreateNewsSecure(string title, MainWebApplication.webhostProxy.User author, System.DateTime date, string content, bool isPublic, string contentType, string picture) {
            return base.Channel.CreateNewsSecure(title, author, date, content, isPublic, contentType, picture);
        }
        
        public System.Threading.Tasks.Task<bool> CreateNewsSecureAsync(string title, MainWebApplication.webhostProxy.User author, System.DateTime date, string content, bool isPublic, string contentType, string picture) {
            return base.Channel.CreateNewsSecureAsync(title, author, date, content, isPublic, contentType, picture);
        }
        
        public bool CreateMatchSecure(string title, MainWebApplication.webhostProxy.User author, System.DateTime date, string content, bool isPublic, string contentType, System.DateTime startTime, System.DateTime endTime, string eventType, string opponent, int homegoals, int awaygoals, MainWebApplication.webhostProxy.Team team) {
            return base.Channel.CreateMatchSecure(title, author, date, content, isPublic, contentType, startTime, endTime, eventType, opponent, homegoals, awaygoals, team);
        }
        
        public System.Threading.Tasks.Task<bool> CreateMatchSecureAsync(string title, MainWebApplication.webhostProxy.User author, System.DateTime date, string content, bool isPublic, string contentType, System.DateTime startTime, System.DateTime endTime, string eventType, string opponent, int homegoals, int awaygoals, MainWebApplication.webhostProxy.Team team) {
            return base.Channel.CreateMatchSecureAsync(title, author, date, content, isPublic, contentType, startTime, endTime, eventType, opponent, homegoals, awaygoals, team);
        }
        
        public bool DeleteUserSecure(string email) {
            return base.Channel.DeleteUserSecure(email);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteUserSecureAsync(string email) {
            return base.Channel.DeleteUserSecureAsync(email);
        }
        
        public MainWebApplication.webhostProxy.User FindUserSecure(string email) {
            return base.Channel.FindUserSecure(email);
        }
        
        public System.Threading.Tasks.Task<MainWebApplication.webhostProxy.User> FindUserSecureAsync(string email) {
            return base.Channel.FindUserSecureAsync(email);
        }
        
        public MainWebApplication.webhostProxy.Match[] FindMatchesSecure(System.DateTime date) {
            return base.Channel.FindMatchesSecure(date);
        }
        
        public System.Threading.Tasks.Task<MainWebApplication.webhostProxy.Match[]> FindMatchesSecureAsync(System.DateTime date) {
            return base.Channel.FindMatchesSecureAsync(date);
        }
        
        public MainWebApplication.webhostProxy.TrainingSession[] FindTrainingSessionsSecure(System.DateTime date) {
            return base.Channel.FindTrainingSessionsSecure(date);
        }
        
        public System.Threading.Tasks.Task<MainWebApplication.webhostProxy.TrainingSession[]> FindTrainingSessionsSecureAsync(System.DateTime date) {
            return base.Channel.FindTrainingSessionsSecureAsync(date);
        }
        
        public MainWebApplication.webhostProxy.News[] FindNewsSecure(System.DateTime date) {
            return base.Channel.FindNewsSecure(date);
        }
        
        public System.Threading.Tasks.Task<MainWebApplication.webhostProxy.News[]> FindNewsSecureAsync(System.DateTime date) {
            return base.Channel.FindNewsSecureAsync(date);
        }
        
        public bool UpdateUserSecure(string oldFn, string oldLn, string username, string password, string firstname, string lastname, string email, int admPri, string type) {
            return base.Channel.UpdateUserSecure(oldFn, oldLn, username, password, firstname, lastname, email, admPri, type);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateUserSecureAsync(string oldFn, string oldLn, string username, string password, string firstname, string lastname, string email, int admPri, string type) {
            return base.Channel.UpdateUserSecureAsync(oldFn, oldLn, username, password, firstname, lastname, email, admPri, type);
        }
        
        public MainWebApplication.webhostProxy.Team FindTeamWithIdSecure(int id, bool retrieveAssoc) {
            return base.Channel.FindTeamWithIdSecure(id, retrieveAssoc);
        }
        
        public System.Threading.Tasks.Task<MainWebApplication.webhostProxy.Team> FindTeamWithIdSecureAsync(int id, bool retrieveAssoc) {
            return base.Channel.FindTeamWithIdSecureAsync(id, retrieveAssoc);
        }
        
        public MainWebApplication.webhostProxy.Team FindTeamSecure(string name, bool retrieveAssoc) {
            return base.Channel.FindTeamSecure(name, retrieveAssoc);
        }
        
        public System.Threading.Tasks.Task<MainWebApplication.webhostProxy.Team> FindTeamSecureAsync(string name, bool retrieveAssoc) {
            return base.Channel.FindTeamSecureAsync(name, retrieveAssoc);
        }
    }
}
